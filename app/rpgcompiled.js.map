{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/ts/AssetLoader.ts",
    "app/ts/Character/Creature.ts",
    "app/ts/Character/Display/DisplayCharacter.ts",
    "app/ts/Character/Display/IWorldObject.ts",
    "app/ts/Character/Poffin.ts",
    "app/ts/Character/TargetMemoryObject.ts",
    "app/ts/NeuralComponents/NeuralReader.ts",
    "app/ts/Render/Renderer.ts",
    "app/ts/Render/SpriteStorage.ts",
    "app/ts/Settings.ts",
    "app/ts/World/WorldController.ts",
    "app/ts/app.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import { Renderer } from './Render/Renderer';\r\nimport { SpriteStorage } from './Render/SpriteStorage';\r\n\r\ndeclare var FontFaceObserver:any;\r\n\r\nexport class AssetLoader {\r\n  private numberLoaded:number;\r\n  private numberToLoad:number;\r\n  private _func:any;\r\n\r\n  constructor(func:any) {\r\n    this.numberLoaded = 0;\r\n    this.numberToLoad = 0;\r\n    this._func = func;\r\n  }\r\n\r\n  public load():void{\r\n    this.loadFonts();\r\n    this.loadCharacters();\r\n  }\r\n\r\n  //-----------------------\r\n\r\n  private loadComplete():void{\r\n    this.numberLoaded++;\r\n    if(this.numberLoaded == this.numberToLoad){\r\n      // Loading complete\r\n      this._func();\r\n    }\r\n  }\r\n  //-----------------------\r\n\r\n  public addRenderedTexture():void{\r\n\r\n    var wrend = Renderer.getInstance();\r\n    var spriteStorage:SpriteStorage = new SpriteStorage();\r\n\r\n    var redstripstex = PIXI.Texture.fromImage('images/redimage.png');\r\n    var sprite1 = new PIXI.Sprite(redstripstex);\r\n\r\n    var rt = PIXI.RenderTexture.create(305,20);\r\n    wrend.getRender().render(sprite1, rt);\r\n\r\n    spriteStorage.addRawTexture(\"reddot\", rt);\r\n  }\r\n\r\n   private loadFonts():void{\r\n    var font = new FontFaceObserver('Roboto Condensed', {\r\n    });\r\n\r\n    font.load().then(function () {\r\n      console.log('Font is available');\r\n    }, function () {\r\n      console.log('Font is not available');\r\n    });\r\n  }\r\n\r\n\r\n  private loadCharacters():void{\r\n    var vm = this;\r\n    var spriteStorage:SpriteStorage = new SpriteStorage();\r\n    var dragonFactory:dragonBones.PixiFactory = spriteStorage.getPixiFactory();\r\n    this.numberToLoad++;\r\n\r\n    PIXI.loader\r\n       .add(\"hero_data\",          \"images/creatures/creatures_ske.json\")\r\n       .add(\"hero_texture_data\",  \"images/creatures/creatures_tex.json\")\r\n       .add(\"hero_texture\",       \"images/creatures/creatures_tex.png\");\r\n\r\n    PIXI.loader.once(\"complete\", function (loader, object) {\r\n      var dragonData = dragonFactory.parseDragonBonesData(object[\"hero_data\"].data);\r\n      dragonFactory.parseTextureAtlasData(object[\"hero_texture_data\"].data, object[\"hero_texture\"].texture);\r\n\r\n      if (dragonData) {\r\n        spriteStorage.addSprite(\"hero_data\", dragonData);\r\n        vm.loadComplete();\r\n      }\r\n    },  this);\r\n    PIXI.loader.load();\r\n  }\r\n}\r\n",
    "import { NeuralReader } from '../NeuralComponents/NeuralReader';\r\nimport { TargetMemoryObject } from './TargetMemoryObject';\r\nimport { IWorldObject, WorldTypes } from './Display/IWorldObject';\r\nimport { WorldController } from '../World/WorldController';\r\nimport { Poffin } from './Poffin';\r\nimport { Settings } from '../Settings';\r\nimport { LoadedDisplaySprite } from './Display/DisplayCharacter';\r\nexport class Creature extends LoadedDisplaySprite implements IWorldObject {\r\n  public id: number;\r\n  public type: WorldTypes;\r\n  \r\n\r\n  private hp:number;\r\n  private memoryBank:TargetMemoryObject[];\r\n\r\n  private walkSpeed:number;\r\n  private runSpeed:number;\r\n\r\n  private _world:WorldController;\r\n\r\n  constructor(armature:string){\r\n    super(armature);\r\n\r\n    // Creature knows about:\r\n    this._world = WorldController.getInstance();\r\n    this.memoryBank = new Array<TargetMemoryObject>();\r\n\r\n    // Stats\r\n    this.walkSpeed = 2;\r\n    this.runSpeed = 5;\r\n    this.type = WorldTypes.CREATURE;\r\n    this.id = Math.random() * 9999999999999;\r\n  }\r\n\r\n  public tick():void{\r\n    this.think();\r\n  }\r\n\r\n  private think():void {\r\n    var targetFromMemory = this.findTarget();\r\n    targetFromMemory.recalculate(this)\r\n    //--------\r\n    var distanceToTarget:number = targetFromMemory.newDistance;\r\n    var angleToTarget:number = targetFromMemory.angle;\r\n\r\n    var inputs = [distanceToTarget, angleToTarget];\r\n\r\n    var availableActions = [\"left\",\"right\",\"up\",\"down\",\"stand\"];\r\n\r\n    inputs.forEach(input => {\r\n      availableActions.forEach(action=>{\r\n        NeuralReader.Read();\r\n      })\r\n    });\r\n    //--------\r\n    targetFromMemory.expireOldCalculations();\r\n  }\r\n\r\n  private findTarget():TargetMemoryObject{\r\n    var firstFoodItem:IWorldObject;\r\n    var objs = this._world.getWorldObjects() as IWorldObject[];\r\n    objs.forEach(element => {\r\n      if(element.type == WorldTypes.FOOD){\r\n        firstFoodItem = element;\r\n        return;\r\n      }\r\n    });\r\n\r\n    // retrieve item from memoryBank\r\n    var memory:TargetMemoryObject;\r\n    this.memoryBank.forEach(element => {\r\n      element.id = firstFoodItem.id;\r\n      memory = element;\r\n      return;\r\n    });\r\n    if(memory == null){\r\n      memory = new TargetMemoryObject(firstFoodItem);\r\n    }\r\n    return memory;\r\n  }\r\n\r\n}\r\n",
    "import { SpriteStorage } from '../../Render/SpriteStorage';\nimport { Renderer } from '../../Render/Renderer';\n\nexport class LoadedDisplaySprite{\n  private _x:number;\n  private _y:number;\n  private _z:number;\n\n  private _wrender:Renderer;\n  private _sprite:dragonBones.PixiArmatureDisplay;\n\n  private spriteStorage:SpriteStorage;\n  private dragonFactory:dragonBones.PixiFactory;\n\n  private scaleSize:number;\n  private currentAnimation:string;\n\n  constructor(armature:string) {\n    this.spriteStorage = new SpriteStorage();\n    this.dragonFactory = this.spriteStorage.getPixiFactory();\n    this.scaleSize = 0.4;\n\n    var char = this.spriteStorage.getSpriteData(\"hero_data\");\n    if(char != null){\n      this.addCharacter(armature);\n    }\n  }\n\n  private addCharacter(armature:string):void{\n    var armatureDisplay:dragonBones.PixiArmatureDisplay = this.dragonFactory.buildArmatureDisplay(armature);\n    this._sprite = armatureDisplay;\n\n    this.scaleX(1);\n    this.Animate(\"stand\");\n  }\n\n  public GetSprite (): dragonBones.PixiArmatureDisplay{\n      return this._sprite;\n  }\n\n  public scaleX(num:number):void{\n    this._sprite.scale.x = this.scaleSize * num;\n    this._sprite.scale.y = this.scaleSize;\n  }\n\n public Animate(animationName:string):void{\n    if(this.currentAnimation != animationName){\n      this.currentAnimation = animationName;\n      this._sprite.animation.play(animationName);\n    }\n  }\n  //\n  get x():number {\n     return this._x;\n  }\n  set x(xx:number) {\n     this._x = xx;\n\n     try {\n       this._sprite.x = this._x;\n    } catch(e) {\n      console.log(e.stack);\n    }\n\n  }\n  //\n  get y():number {\n     return this._y;\n  }\n  set y(yy:number) {\n     this._y = yy;\n     this._sprite.y = this._y;\n  }\n\n  //\n  get z():number {\n     return this._z;\n  }\n  set z(zz:number) {\n     this._z = zz;\n  }\n  //\n\n  public tick():void{\n  }\n}\n",
    "import { SpriteStorage } from '../../Render/SpriteStorage';\nimport { Renderer } from '../../Render/Renderer';\n\nexport interface IWorldObject{\n  id:number;\n  type:WorldTypes;\n  x:number;\n  y:number;\n}\n\nexport enum WorldTypes{\n  CREATURE = 1,\n  FOOD = 2\n}",
    "import { IWorldObject, WorldTypes } from './Display/IWorldObject';\r\nimport { Settings } from '../Settings';\r\nimport { LoadedDisplaySprite } from './Display/DisplayCharacter';\r\nexport class Poffin extends LoadedDisplaySprite implements IWorldObject {\r\n  public type: number;\r\n  public id: number;\r\n\r\n  private hp:number;\r\n\r\n  constructor(){\r\n    super(\"Poffin\");\r\n\r\n    this.type = WorldTypes.FOOD;\r\n    this.id = Math.random() * 9999999999999;\r\n\r\n  }\r\n\r\n}\r\n",
    "import { IWorldObject } from './Display/IWorldObject';\r\nexport class TargetMemoryObject{\r\n    public id:number;\r\n    public worldObject:IWorldObject;\r\n\r\n    public oldDisX:number;\r\n    public oldDisY:number;\r\n    public oldDistance:number;\r\n\r\n    public newDisX:number;\r\n    public newDisY:number;\r\n    public newDistance:number;\r\n    public angle:number; // (from brainobject's perspective)\r\n\r\n\r\n\r\n    constructor(worldObj:IWorldObject){\r\n        this.id = worldObj.id;\r\n        this.worldObject = worldObj;\r\n    }\r\n\r\n    expireOldCalculations():void{\r\n         this.oldDisX = this.newDisX;\r\n         this.oldDisY = this.newDisY;\r\n         this.oldDistance = this.newDistance;\r\n    }\r\n\r\n    recalculate(brainobject:IWorldObject):void{\r\n        this.newDisX = Math.abs(this.worldObject.x - brainobject.x);\r\n        this.newDisY = Math.abs(this.worldObject.y - brainobject.y);\r\n        this.newDistance = Math.sqrt(this.newDisX*this.newDisX + this.newDisY*this.newDisY);\r\n    \r\n\r\n        //calculate angle\r\n        if(brainobject.x > this.worldObject.x && brainobject.y > this.worldObject.y){\r\n            // Left Top quadrant\r\n            this.angle = 360 - this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(brainobject.x < this.worldObject.x && brainobject.y > this.worldObject.y){\r\n            // Right Top quadrant\r\n            this.angle = this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(brainobject.x > this.worldObject.x && brainobject.y < this.worldObject.y){\r\n            // Left Down quadrant\r\n            this.angle = 270 - this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(brainobject.x < this.worldObject.x && brainobject.y < this.worldObject.y){\r\n            // Right Down quadrant\r\n            this.angle = 90 +this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(this.newDisX == 0){\r\n            if(brainobject.y > this.worldObject.y){\r\n                // Char below memory object\r\n                this.angle = 0;\r\n            }else {\r\n                this.angle = 180;\r\n            }\r\n        }  if(this.newDisY == 0){\r\n            if(brainobject.x > this.worldObject.x){\r\n                // Char right of memory object\r\n                this.angle = 270;\r\n            }else {\r\n                this.angle = 90;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    radiansToDegrees(radians:number){\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    \r\n}",
    "export class NeuralReader{\r\n    public static Read():number{\r\n        return 1;\r\n    }\r\n}",
    "import { WorldController } from '../World/WorldController';\r\nimport { Settings } from '../Settings';\r\nimport { LoadedDisplaySprite } from '../Character/Display/DisplayCharacter';\r\n\r\ndeclare var FPSMeter:any;\r\n\r\nexport class Renderer {\r\n  private static _singleton:Renderer;\r\n  private _stage:PIXI.Container;\r\n  private _renderer;\r\n  private worldController:WorldController;\r\n  private fpsmeter:any;\r\n\r\n  public static getInstance():Renderer{\r\n    if(this._singleton == null){\r\n      this._singleton = new Renderer();\r\n    }\r\n    return this._singleton;\r\n  }\r\n\r\n  public getRender():any{\r\n    return this._renderer;\r\n  }\r\n\r\n  constructor() {\r\n    // Variable Initialization\r\n    this._stage = new PIXI.Container();\r\n    this._stage.hitArea = new PIXI.Rectangle(0, 0, Settings.stageWidth, Settings.stageHeight);\r\n    this._renderer = PIXI.autoDetectRenderer(Settings.stageWidth, Settings.stageHeight, {\r\n        backgroundColor: 0x65C25D,\r\n        antialias: true\r\n    });\r\n\r\n    // Add FPS Meter\r\n    this.fpsmeter = new FPSMeter();\r\n    \r\n    // Add PIXI container to the HTML page\r\n    document.body.appendChild(this._renderer.view);\r\n\r\n    // Set references\r\n    this.worldController = WorldController.getInstance();\r\n\r\n    // Game Ticker\r\n    requestAnimationFrame(this.RefreshDisplay);\r\n  }\r\n\r\n  public RefreshDisplay = () :void => {\r\n      this.worldController.tickTock();\r\n\r\n      this._renderer.render(this._stage); // render the stage\r\n      this.fpsmeter.tick();               // fps ticker\r\n\r\n      requestAnimationFrame(this.RefreshDisplay);\r\n  }\r\n\r\n\r\n  public AddAnySprite(char:any):void{\r\n    this._stage.addChild(char);\r\n  }\r\n\r\n}\r\n",
    "import { Renderer } from './Renderer';\r\nexport class SpriteStorage {\r\n\r\n  private static _singleton:SpriteStorage;\r\n  \r\n  private _store:dragonBones.DragonBonesData[];\r\n  public _textureStore:PIXI.Sprite[];\r\n\r\n  private _renderReadyTextureStore:PIXI.RenderTexture[]\r\n  private _renderReadySpriteStore:PIXI.Sprite[]\r\n\r\n  private _pixiFactory:dragonBones.PixiFactory;\r\n  private num:Number;\r\n\r\n  constructor() {\r\n    if (!SpriteStorage._singleton) {\r\n          SpriteStorage._singleton = this;\r\n          this.init();\r\n    }\r\n    return SpriteStorage._singleton;\r\n  }\r\n\r\n  private init():void{\r\n    this._store = [];\r\n    this._textureStore = [];\r\n    this._renderReadyTextureStore = [];\r\n    this._renderReadySpriteStore = [];\r\n    \r\n    this.num = Math.random();\r\n  }\r\n\r\n  public getPixiFactory(): dragonBones.PixiFactory {\r\n    if(this._pixiFactory == null){\r\n      this._pixiFactory = new dragonBones.PixiFactory();\r\n    }\r\n    return this._pixiFactory;\r\n  }\r\n\r\n  //-----------------------\r\n  public addSprite(spriteName:string, dragonData:dragonBones.DragonBonesData):void {\r\n    this._store[spriteName] = dragonData;\r\n  }\r\n\r\n  public getSpriteData(spriteName:string):dragonBones.DragonBonesData{\r\n    return this._store[spriteName];\r\n  }\r\n\r\n  //-----------------------\r\n  public addRawTexture(textName:string, texture:PIXI.RenderTexture):void{\r\n      var sp = new PIXI.Sprite(texture);\r\n      this._textureStore[textName] = sp;\r\n  }\r\n\r\n\r\n\r\n\r\n  public getSprite(textureName:string):PIXI.Sprite{\r\n    return this._textureStore[textureName]; //returns clothing sprite\r\n  }\r\n\r\n\r\n\r\n  //-----------------------\r\n}",
    "export class Settings {\r\n    public static stageWidth:number;\r\n    public static stageHeight:number;\r\n    public static aspectRatio:number;\r\n\r\n\r\n    public static initialize():void{\r\n        Settings.stageWidth = window.innerWidth;\r\n        Settings.stageHeight = window.innerHeight;\r\n        Settings.aspectRatio = 16/9;\r\n\r\n\r\n        console.log(\"==== Initializing Settings\")\r\n    }\r\n}\r\n",
    "import { Poffin } from '../Character/Poffin';\r\nimport { Creature } from '../Character/Creature';\r\nimport { LoadedDisplaySprite } from '../Character/Display/DisplayCharacter';\r\nexport class WorldController{\r\n    \r\n    static _singleton:WorldController;\r\n    private stage:PIXI.Sprite;\r\n    private displayList:any[];\r\n\r\n    constructor(){\r\n        this.stage = new PIXI.Sprite();\r\n\r\n        this.displayList = [];\r\n    }\r\n    public static getInstance():WorldController{\r\n        if(this._singleton == null){\r\n        this._singleton = new WorldController();\r\n        }\r\n        return this._singleton;\r\n    }\r\n\r\n    public getDisplaySprite():PIXI.Sprite{\r\n        return this.stage;\r\n    }\r\n\r\n    public spawn():void{\r\n        var pika = new Creature(\"PikaCreature\");\r\n        pika.x = 250;\r\n        pika.y = 150;\r\n        this.AddGameChild(pika);\r\n\r\n        var food = new Poffin();\r\n        food.x =  200;\r\n        food.y = 200;\r\n\r\n        this.AddGameChild(food);\r\n    }\r\n\r\n    public AddGameChild(char:LoadedDisplaySprite):void{\r\n        this.stage.addChild(char.GetSprite());\r\n        this.displayList.push(char);\r\n    }\r\n\r\n    public tickTock():void{\r\n      this.stage.children.sort(function(obj1, obj2) {\r\n        return obj1.position.y - obj2.position.y;\r\n      });\r\n\r\n      for( let char of this.displayList){\r\n          char.tick();\r\n      }\r\n    }\r\n\r\n    public getWorldObjects():any[]{\r\n        return this.displayList;\r\n    }\r\n}",
    "import { Settings } from './Settings';\r\nimport { WorldController } from './World/WorldController';\r\nimport { AssetLoader } from './AssetLoader';\r\nimport { Renderer } from './Render/Renderer';\r\n\r\nclass RPG {\r\n\r\n  private rendererController:Renderer;\r\n  private worldController:WorldController;\r\n  \r\n  /*\r\n  -------------------------------------------\r\n  ----------  TO DO LIST --------------------\r\n  -------------------------------------------\r\n  - Get different facial expressions shown\r\n  - Tiling system\r\n  - Camera system\r\n\r\n  -------------------------------------------\r\n  ----------  Notes -------------------------\r\n  -------------------------------------------\r\n  - 32 bit / 360 dpi\r\n  */\r\n\r\n  constructor() {\r\n    console.log(\"%c========== Game Start ==========\",\"background: #222; color: #bada55;\");\r\n    var loader:AssetLoader = new AssetLoader(this.loadEngine);\r\n    loader.load();\r\n  }\r\n\r\n  private loadEngine ():void{\r\n    // Note: 'this' here is in the context of AssetLoader still\r\n    Settings.initialize();\r\n    this.rendererController = Renderer.getInstance();\r\n    this.worldController    = WorldController.getInstance();\r\n\r\n    this.worldController.spawn();\r\n    this.rendererController.AddAnySprite(this.worldController.getDisplaySprite());\r\n  }\r\n}\r\n\r\n// Game Start ----------\r\nnew RPG();\r\n//----------------------\r\n"
  ]
}