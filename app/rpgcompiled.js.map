{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/ts/AssetLoader.ts",
    "app/ts/Character/Creature.ts",
    "app/ts/Character/CreatureStats.ts",
    "app/ts/Character/Display/DisplayCharacter.ts",
    "app/ts/Character/Display/IWorldObject.ts",
    "app/ts/Character/Poffin.ts",
    "app/ts/Character/TargetMemoryObject.ts",
    "app/ts/NeuralComponents/Brain.ts",
    "app/ts/NeuralComponents/NeuralActions.ts",
    "app/ts/NeuralComponents/NeuralBranch.ts",
    "app/ts/NeuralComponents/NeuralReader.ts",
    "app/ts/NeuralComponents/NeuronRating.ts",
    "app/ts/Render/Renderer.ts",
    "app/ts/Render/SpriteStorage.ts",
    "app/ts/Settings.ts",
    "app/ts/World/Func.ts",
    "app/ts/World/TextFormat.ts",
    "app/ts/World/WorldController.ts",
    "app/ts/app.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import { Renderer } from './Render/Renderer';\r\nimport { SpriteStorage } from './Render/SpriteStorage';\r\n\r\ndeclare var FontFaceObserver:any;\r\n\r\nexport class AssetLoader {\r\n  private numberLoaded:number;\r\n  private numberToLoad:number;\r\n  private _func:any;\r\n\r\n  constructor(func:any) {\r\n    this.numberLoaded = 0;\r\n    this.numberToLoad = 0;\r\n    this._func = func;\r\n  }\r\n\r\n  public load():void{\r\n    this.loadFonts();\r\n    this.loadCharacters();\r\n  }\r\n\r\n  //-----------------------\r\n\r\n  private loadComplete():void{\r\n    this.numberLoaded++;\r\n    if(this.numberLoaded == this.numberToLoad){\r\n      // Loading complete\r\n      this._func();\r\n    }\r\n  }\r\n  //-----------------------\r\n\r\n  public addRenderedTexture():void{\r\n\r\n    var wrend = Renderer.getInstance();\r\n    var spriteStorage:SpriteStorage = new SpriteStorage();\r\n\r\n    var redstripstex = PIXI.Texture.fromImage('images/redimage.png');\r\n    var sprite1 = new PIXI.Sprite(redstripstex);\r\n\r\n    var rt = PIXI.RenderTexture.create(305,20);\r\n    wrend.getRender().render(sprite1, rt);\r\n\r\n    spriteStorage.addRawTexture(\"reddot\", rt);\r\n  }\r\n\r\n   private loadFonts():void{\r\n    var font = new FontFaceObserver('Roboto Condensed', {\r\n    });\r\n\r\n    font.load().then(function () {\r\n      console.log('Font is available');\r\n    }, function () {\r\n      console.log('Font is not available');\r\n    });\r\n  }\r\n\r\n\r\n  private loadCharacters():void{\r\n    var vm = this;\r\n    var spriteStorage:SpriteStorage = new SpriteStorage();\r\n    var dragonFactory:dragonBones.PixiFactory = spriteStorage.getPixiFactory();\r\n    this.numberToLoad++;\r\n\r\n    PIXI.loader\r\n       .add(\"hero_data\",          \"images/creatures/creatures_ske.json\")\r\n       .add(\"hero_texture_data\",  \"images/creatures/creatures_tex.json\")\r\n       .add(\"hero_texture\",       \"images/creatures/creatures_tex.png\");\r\n\r\n    PIXI.loader.once(\"complete\", function (loader, object) {\r\n      var dragonData = dragonFactory.parseDragonBonesData(object[\"hero_data\"].data);\r\n      dragonFactory.parseTextureAtlasData(object[\"hero_texture_data\"].data, object[\"hero_texture\"].texture);\r\n\r\n      if (dragonData) {\r\n        spriteStorage.addSprite(\"hero_data\", dragonData);\r\n        vm.loadComplete();\r\n      }\r\n    },  this);\r\n    PIXI.loader.load();\r\n  }\r\n}\r\n",
    "import { Func } from '../World/Func';\r\nimport { Brain } from '../NeuralComponents/Brain';\r\nimport { NeuralBranch } from '../NeuralComponents/NeuralBranch';\r\nimport { NeuralReader } from '../NeuralComponents/NeuralReader';\r\nimport { TargetMemoryObject } from './TargetMemoryObject';\r\nimport { IWorldObject, WorldTypes } from './Display/IWorldObject';\r\nimport { WorldController } from '../World/WorldController';\r\nimport { Poffin } from './Poffin';\r\nimport { Settings } from '../Settings';\r\nimport { LoadedDisplaySprite } from './Display/DisplayCharacter';\r\nexport class Creature extends LoadedDisplaySprite implements IWorldObject {\r\n  public id: number;\r\n  public type: WorldTypes;\r\n  \r\n\r\n  private hp:number;\r\n  private memoryBank:TargetMemoryObject[];\r\n\r\n  private walkSpeed:number;\r\n  private runSpeed:number;\r\n\r\n  private brain:Brain;\r\n  private greyMatter:NeuralBranch[];\r\n\r\n  private _world:WorldController;\r\n\r\n  constructor(armature:string){\r\n    super(armature);\r\n\r\n    // Creature knows about:\r\n    this._world = WorldController.getInstance();\r\n    this.brain = new Brain();\r\n    this.memoryBank = new Array<TargetMemoryObject>();\r\n    this.greyMatter = new Array<NeuralBranch>();\r\n\r\n    var availableActions = [\"left\",\"right\",\"up\",\"down\",\"stand\"];\r\n    for(var i=0; i < 20; i++){\r\n      var n = new NeuralBranch();\r\n      n.generate(availableActions);\r\n      this.greyMatter.push(n);\r\n    }\r\n\r\n    this.brain.AddOptions(this.greyMatter);\r\n\r\n    // Stats\r\n    this.hp = 1000;\r\n    this.walkSpeed = 2;\r\n    this.runSpeed = 5;\r\n    this.type = WorldTypes.CREATURE;\r\n    this.id = Math.floor(Math.random() * 99999999999999);\r\n  }\r\n\r\n  public tick():void{\r\n    this.think();\r\n    this.age();\r\n  }\r\n\r\n  private age():void{\r\n    this.hp--;\r\n    if(this.hp < 0){\r\n        this.markAsDeleted = true;\r\n    }\r\n  }\r\n\r\n  public getHp():number{\r\n    return this.hp;\r\n  }\r\n\r\n  public reproduce():void{\r\n    this.hp += 1000;\r\n    this._world.reproduce(this.brain, this);\r\n  }\r\n\r\n  public addBrain(brainToAdd:Brain):void{\r\n    this.brain.AddOptions(brainToAdd.getOptions())\r\n  }\r\n\r\n  public move(action:string):void{\r\n     switch(action){\r\n          case \"left\":\r\n              this.x -= this.runSpeed;\r\n              this.scaleX(1);\r\n              break;\r\n          case \"right\":\r\n              this.x += this.runSpeed;\r\n              this.scaleX(-1);\r\n              break;\r\n          case \"up\":\r\n              this.y -= this.runSpeed;\r\n              break;\r\n          case \"down\":\r\n              this.y += this.runSpeed;\r\n              break;\r\n          case \"stand\":\r\n              break;\r\n          default:\r\n              console.log(\"Invalid Action:\", action);\r\n      }\r\n\r\n\r\n      if(this.x < 0){\r\n        this.x = Settings.stageWidth;\r\n      }else if(this.x > Settings.stageWidth){\r\n        this.x = 0;\r\n      }\r\n      if(this.y < 0 ){\r\n        this.y = Settings.stageHeight;\r\n      }else if(this.y > Settings.stageHeight){\r\n        this.y = 0;\r\n      }\r\n\r\n  }\r\n\r\n  private think():void {\r\n    var targetFromMemory = this.findTarget();\r\n    targetFromMemory.recalculate(this)\r\n    //--------\r\n    var distanceToTarget:number = targetFromMemory.newDistance;\r\n    var angleToTarget:number = targetFromMemory.angle;\r\n\r\n    var inputs = [angleToTarget, targetFromMemory.worldObject.type];\r\n\r\n    var optionsForTheseInputs = this.brain.getBranchesBasedOnInput(inputs);\r\n    // Pick option\r\n    var chosenOption = Func.Sample(optionsForTheseInputs); // need to favour higher values\r\n\r\n    NeuralReader.CarryOutAction(this, chosenOption, inputs);\r\n\r\n    chosenOption.value++;\r\n    this.brain.remember(chosenOption);\r\n\r\n    //\r\n\r\n\r\n    // pick GA Tree based on value and randomness - based on given inputs \r\n    // \r\n    // check if it's any closer to target (need to come up with memory for running away from targets)\r\n    // reassign fit value\r\n\r\n    \r\n    //--------\r\n    targetFromMemory.expireOldCalculations();\r\n  }\r\n\r\n  private findTarget():TargetMemoryObject{\r\n    var firstWorldObject:IWorldObject;\r\n    var objs = this._world.getWorldObjects() as IWorldObject[];\r\n    objs.forEach(element => {\r\n        firstWorldObject = element;\r\n    });\r\n\r\n    // retrieve item from memoryBank\r\n    var memory:TargetMemoryObject;\r\n    this.memoryBank.forEach(element => {\r\n      element.id = firstWorldObject.id;\r\n      memory = element;\r\n      return;\r\n    });\r\n\r\n    if(memory == null){\r\n      memory = new TargetMemoryObject(firstWorldObject);\r\n    }\r\n\r\n    return memory;\r\n  }\r\n\r\n}\r\n",
    "import { Brain } from '../NeuralComponents/Brain';\r\nexport class CreatureStats{\r\n    public HP:number;\r\n\r\n    constructor(){\r\n        this.HP = 0;\r\n    }\r\n}",
    "import { SpriteStorage } from '../../Render/SpriteStorage';\nimport { Renderer } from '../../Render/Renderer';\n\nexport class LoadedDisplaySprite{\n  private _x:number;\n  private _y:number;\n  private _z:number;\n\n  private _wrender:Renderer;\n  private _sprite:dragonBones.PixiArmatureDisplay;\n\n  private spriteStorage:SpriteStorage;\n  private dragonFactory:dragonBones.PixiFactory;\n\n  private scaleSize:number;\n  private currentAnimation:string;\n  public markAsDeleted:boolean;\n\n\n  constructor(armature:string) {\n    this.spriteStorage = new SpriteStorage();\n    this.dragonFactory = this.spriteStorage.getPixiFactory();\n    this.scaleSize = 0.4;\n    this.markAsDeleted = false;\n\n    var char = this.spriteStorage.getSpriteData(\"hero_data\");\n    if(char != null){\n      this.addCharacter(armature);\n    }\n  }\n\n  private addCharacter(armature:string):void{\n    var armatureDisplay:dragonBones.PixiArmatureDisplay = this.dragonFactory.buildArmatureDisplay(armature);\n    this._sprite = armatureDisplay;\n\n    this.scaleX(1);\n    this.Animate(\"stand\");\n  }\n\n  public GetSprite (): dragonBones.PixiArmatureDisplay{\n      return this._sprite;\n  }\n\n  public scaleX(num:number):void{\n    this._sprite.scale.x = this.scaleSize * num;\n    this._sprite.scale.y = this.scaleSize;\n  }\n\n  public resize(num:number):void{\n    this.scaleSize = num;\n    this.scaleX(1);\n  }\n\n public Animate(animationName:string):void{\n    if(this.currentAnimation != animationName){\n      this.currentAnimation = animationName;\n      this._sprite.animation.play(animationName);\n    }\n  }\n  //\n  get x():number {\n     return this._x;\n  }\n  set x(xx:number) {\n     this._x = xx;\n\n     try {\n       this._sprite.x = this._x;\n    } catch(e) {\n      console.log(e.stack);\n    }\n\n  }\n  //\n  get y():number {\n     return this._y;\n  }\n  set y(yy:number) {\n     this._y = yy;\n     this._sprite.y = this._y;\n  }\n\n  //\n  get z():number {\n     return this._z;\n  }\n  set z(zz:number) {\n     this._z = zz;\n  }\n  //\n\n  public tick():void{\n  }\n}\n",
    "import { SpriteStorage } from '../../Render/SpriteStorage';\nimport { Renderer } from '../../Render/Renderer';\n\nexport interface IWorldObject{\n  id:number;\n  type:WorldTypes;\n  x:number;\n  y:number;\n}\n\nexport enum WorldTypes{\n  CREATURE = 1,\n  FOOD = 2\n}",
    "import { IWorldObject, WorldTypes } from './Display/IWorldObject';\r\nimport { Settings } from '../Settings';\r\nimport { LoadedDisplaySprite } from './Display/DisplayCharacter';\r\nexport class Poffin extends LoadedDisplaySprite implements IWorldObject {\r\n  public type: number;\r\n  public id: number;\r\n\r\n  private hp:number;\r\n\r\n  constructor(){\r\n    super(\"Poffin\");\r\n\r\n    this.markAsDeleted = false;\r\n    this.type = WorldTypes.FOOD;\r\n    this.id = Math.floor(Math.random() * 99999999999999);\r\n\r\n  }\r\n\r\n  public eaten():void{\r\n    this.markAsDeleted = true;\r\n  }\r\n\r\n}\r\n",
    "import { IWorldObject } from './Display/IWorldObject';\r\nexport class TargetMemoryObject{\r\n    public id:number;\r\n    public worldObject:IWorldObject;\r\n\r\n    public oldDisX:number;\r\n    public oldDisY:number;\r\n    public oldDistance:number;\r\n\r\n    public newDisX:number;\r\n    public newDisY:number;\r\n    public newDistance:number;\r\n    public angle:number; // (from brainobject's perspective)\r\n\r\n\r\n\r\n    constructor(worldObj:IWorldObject){\r\n        this.id = worldObj.id;\r\n        this.worldObject = worldObj;\r\n    }\r\n\r\n    expireOldCalculations():void{\r\n         this.oldDisX = this.newDisX;\r\n         this.oldDisY = this.newDisY;\r\n         this.oldDistance = this.newDistance;\r\n    }\r\n\r\n    recalculate(brainobject:IWorldObject):void{\r\n        this.newDisX = Math.abs(this.worldObject.x - brainobject.x);\r\n        this.newDisY = Math.abs(this.worldObject.y - brainobject.y);\r\n        this.newDistance = Math.sqrt(this.newDisX*this.newDisX + this.newDisY*this.newDisY);\r\n    \r\n\r\n        //calculate angle\r\n        if(brainobject.x > this.worldObject.x && brainobject.y > this.worldObject.y){\r\n            // Left Top quadrant\r\n            this.angle = 360 - this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(brainobject.x < this.worldObject.x && brainobject.y > this.worldObject.y){\r\n            // Right Top quadrant\r\n            this.angle = this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(brainobject.x > this.worldObject.x && brainobject.y < this.worldObject.y){\r\n            // Left Down quadrant\r\n            this.angle = 270 - this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(brainobject.x < this.worldObject.x && brainobject.y < this.worldObject.y){\r\n            // Right Down quadrant\r\n            this.angle = 90 +this.radiansToDegrees(Math.atan(this.newDisY / this.newDisX));\r\n        }\r\n\r\n        if(this.newDisX == 0){\r\n            if(brainobject.y > this.worldObject.y){\r\n                // Char below memory object\r\n                this.angle = 0;\r\n            }else {\r\n                this.angle = 180;\r\n            }\r\n        }  if(this.newDisY == 0){\r\n            if(brainobject.x > this.worldObject.x){\r\n                // Char right of memory object\r\n                this.angle = 270;\r\n            }else {\r\n                this.angle = 90;\r\n            }\r\n        }\r\n\r\n        var baseSliceAngle = 36;\r\n        this.angle = Math.floor(this.angle  / baseSliceAngle) * baseSliceAngle;\r\n        \r\n    }\r\n\r\n    radiansToDegrees(radians:number){\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    \r\n}",
    "import { Func } from '../World/Func';\r\nimport { NeuralBranch } from './NeuralBranch';\r\nimport { NeuronRating } from './NeuronRating';\r\nexport class Brain{\r\n    private memory:Array<NeuronRating>;\r\n    private greyMatter:Array<NeuralBranch>;\r\n\r\n    constructor(){\r\n        this.memory = new Array<NeuronRating>();\r\n        this.greyMatter = new Array<NeuralBranch>();\r\n    }\r\n\r\n    public getBranchesBasedOnInput(inputs:Array<any>):Array<NeuronRating>{\r\n        var res = new Array<NeuronRating>();\r\n\r\n        var usedNeurons = [];\r\n        this.memory.forEach(neuron => {\r\n            if(neuron.hasInputs(inputs)){\r\n                res.push(neuron);\r\n\r\n                usedNeurons[neuron.neuralBranch.id] = true;\r\n            }\r\n        });\r\n\r\n        res = res.concat(this.getSomeUnknownOptions(inputs, usedNeurons));\r\n        res = res.sort((n1,n2) => n1.value - n2.value);\r\n        return res;\r\n    }\r\n\r\n    private getSomeUnknownOptions(inputs:Array<any>, usedNeurons:Array<boolean>):Array<NeuronRating>{\r\n        var maxOptions = 10;\r\n        var res = new Array<NeuronRating>();\r\n        for(var i=0; i< maxOptions; i++){\r\n            var neuralOption = Func.Sample(this.greyMatter);\r\n\r\n            if(usedNeurons[neuralOption.id]==true){\r\n                continue;\r\n            }\r\n            usedNeurons[neuralOption.id] = true;\r\n\r\n            var n = new NeuronRating();\r\n            n.inputs = inputs;\r\n            n.neuralBranch = neuralOption;\r\n            n.value = 0;\r\n\r\n            res.push(n);\r\n        }\r\n\r\n        return res;        \r\n    }\r\n\r\n    public remember(neu:NeuronRating):void{\r\n        this.memory.push(neu);\r\n    }\r\n\r\n    public AddOptions(grey:Array<NeuralBranch>):void{\r\n        this.greyMatter = this.greyMatter.concat(grey);\r\n    }\r\n\r\n    public getOptions():Array<NeuralBranch>{\r\n        return this.greyMatter;\r\n    }\r\n}",
    "import { Func } from '../World/Func';\r\nexport class NeuralActions{\r\n    public action:ActionTypes;\r\n    public valToCompare:any;\r\n    constructor(act:ActionTypes, val?:any){\r\n        this.action = act;\r\n        this.valToCompare = val;\r\n    }\r\n\r\n    static getComparator():ActionTypes{\r\n        var conjuctions = [ActionTypes.LESS_THAN, ActionTypes.GREATER_THAN, ActionTypes.EQUAL_TO]\r\n        return Func.Sample(conjuctions);\r\n    }\r\n}\r\n\r\n\r\nexport enum ActionTypes{\r\n    INPUT,\r\n    COMPARED_TO_VAL,\r\n    DO_ACTION,\r\n\r\n    // Comparators\r\n    LESS_THAN,\r\n    GREATER_THAN,\r\n    EQUAL_TO,\r\n\r\n    //Conjuction\r\n    AND,\r\n    OR\r\n}",
    "import { Func } from '../World/Func';\r\nimport { ActionTypes, NeuralActions } from './NeuralActions';\r\nexport class NeuralBranch{\r\n    public id:number;\r\n\r\n    public actions:NeuralActions[];\r\n    constructor(){\r\n        this.id = Math.floor(Math.random() * 99999999999999);\r\n\r\n        this.actions = new Array<NeuralActions>();\r\n    }\r\n    generate(availableActions){\r\n        var vals = [36,72,108,144,180,216,252,288,324,360];\r\n\r\n        this.actions.push(new NeuralActions(ActionTypes.INPUT));\r\n        this.actions.push(new NeuralActions(NeuralActions.getComparator()));\r\n        this.actions.push(new NeuralActions(ActionTypes.COMPARED_TO_VAL, Func.Sample(vals)));\r\n        this.actions.push(new NeuralActions(ActionTypes.DO_ACTION, Func.Sample(availableActions)));\r\n    }\r\n}",
    "import { ActionTypes, NeuralActions } from './NeuralActions';\r\nimport { NeuronRating } from './NeuronRating';\r\nimport { Creature } from '../Character/Creature';\r\nexport class NeuralReader{\r\n    public static CarryOutAction(cre:Creature, chosenOption:NeuronRating, inputs:Array<any>):void{\r\n\r\n        var res = \"\";\r\n        chosenOption.neuralBranch.actions.forEach(action => {\r\n            switch(action.action){\r\n                case ActionTypes.INPUT:\r\n                    res += inputs[0];\r\n                    break;\r\n                case ActionTypes.COMPARED_TO_VAL:\r\n                    res += action.valToCompare;\r\n                    break;\r\n                case ActionTypes.DO_ACTION:\r\n                    try{\r\n                        var r = eval(res);\r\n                        if(r){\r\n                            cre.move(action.valToCompare);\r\n                        }\r\n                    }catch(e){\r\n                        console.log(\"Invalid Eval\", res, e);\r\n                    }\r\n                    \r\n                    break;\r\n                case ActionTypes.LESS_THAN:\r\n                    res += \"<\";\r\n                    break;\r\n                case ActionTypes.GREATER_THAN:\r\n                    res += \">\";\r\n                    break;\r\n                case ActionTypes.EQUAL_TO:\r\n                    res += \"==\";\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}",
    "import { NeuralBranch } from './NeuralBranch';\r\nexport class NeuronRating{\r\n    public inputs:number[];\r\n    public value:number; // 0 - 1 for a set  of given inputs\r\n    public neuralBranch:NeuralBranch;\r\n\r\n    public hasInputs(inputsQuery:Array<any>):boolean{\r\n        var r = true;\r\n        this.inputs.forEach(input => {\r\n            inputsQuery.forEach(query=>{\r\n                if(input != query){\r\n                    r = false;\r\n                    return;\r\n                }\r\n            })\r\n        });\r\n        return r;\r\n    }\r\n}",
    "import { WorldController } from '../World/WorldController';\r\nimport { Settings } from '../Settings';\r\nimport { LoadedDisplaySprite } from '../Character/Display/DisplayCharacter';\r\n\r\ndeclare var FPSMeter:any;\r\n\r\nexport class Renderer {\r\n  private static _singleton:Renderer;\r\n  private _stage:PIXI.Container;\r\n  private _renderer;\r\n  private worldController:WorldController;\r\n  private fpsmeter:any;\r\n\r\n  public static getInstance():Renderer{\r\n    if(this._singleton == null){\r\n      this._singleton = new Renderer();\r\n    }\r\n    return this._singleton;\r\n  }\r\n\r\n  public getRender():any{\r\n    return this._renderer;\r\n  }\r\n\r\n  constructor() {\r\n    // Variable Initialization\r\n    this._stage = new PIXI.Container();\r\n    this._stage.hitArea = new PIXI.Rectangle(0, 0, Settings.stageWidth, Settings.stageHeight);\r\n    this._renderer = PIXI.autoDetectRenderer(Settings.stageWidth, Settings.stageHeight, {\r\n        backgroundColor: 0x65C25D,\r\n        antialias: true\r\n    });\r\n\r\n    // Add FPS Meter\r\n    this.fpsmeter = new FPSMeter();\r\n    \r\n    // Add PIXI container to the HTML page\r\n    document.body.appendChild(this._renderer.view);\r\n\r\n    // Set references\r\n    this.worldController = WorldController.getInstance();\r\n\r\n    // Game Ticker\r\n    requestAnimationFrame(this.RefreshDisplay);\r\n  }\r\n\r\n  public RefreshDisplay = () :void => {\r\n      this.worldController.tickTock();\r\n\r\n      this._renderer.render(this._stage); // render the stage\r\n      this.fpsmeter.tick();               // fps ticker\r\n\r\n      requestAnimationFrame(this.RefreshDisplay);\r\n  }\r\n\r\n\r\n  public AddAnySprite(char:any):void{\r\n    this._stage.addChild(char);\r\n  }\r\n\r\n}\r\n",
    "import { Renderer } from './Renderer';\r\nexport class SpriteStorage {\r\n\r\n  private static _singleton:SpriteStorage;\r\n  \r\n  private _store:dragonBones.DragonBonesData[];\r\n  public _textureStore:PIXI.Sprite[];\r\n\r\n  private _renderReadyTextureStore:PIXI.RenderTexture[]\r\n  private _renderReadySpriteStore:PIXI.Sprite[]\r\n\r\n  private _pixiFactory:dragonBones.PixiFactory;\r\n  private num:Number;\r\n\r\n  constructor() {\r\n    if (!SpriteStorage._singleton) {\r\n          SpriteStorage._singleton = this;\r\n          this.init();\r\n    }\r\n    return SpriteStorage._singleton;\r\n  }\r\n\r\n  private init():void{\r\n    this._store = [];\r\n    this._textureStore = [];\r\n    this._renderReadyTextureStore = [];\r\n    this._renderReadySpriteStore = [];\r\n    \r\n    this.num = Math.random();\r\n  }\r\n\r\n  public getPixiFactory(): dragonBones.PixiFactory {\r\n    if(this._pixiFactory == null){\r\n      this._pixiFactory = new dragonBones.PixiFactory();\r\n    }\r\n    return this._pixiFactory;\r\n  }\r\n\r\n  //-----------------------\r\n  public addSprite(spriteName:string, dragonData:dragonBones.DragonBonesData):void {\r\n    this._store[spriteName] = dragonData;\r\n  }\r\n\r\n  public getSpriteData(spriteName:string):dragonBones.DragonBonesData{\r\n    return this._store[spriteName];\r\n  }\r\n\r\n  //-----------------------\r\n  public addRawTexture(textName:string, texture:PIXI.RenderTexture):void{\r\n      var sp = new PIXI.Sprite(texture);\r\n      this._textureStore[textName] = sp;\r\n  }\r\n\r\n\r\n\r\n\r\n  public getSprite(textureName:string):PIXI.Sprite{\r\n    return this._textureStore[textureName]; //returns clothing sprite\r\n  }\r\n\r\n\r\n\r\n  //-----------------------\r\n}",
    "export class Settings {\r\n    public static stageWidth:number;\r\n    public static stageHeight:number;\r\n    public static aspectRatio:number;\r\n\r\n\r\n    public static initialize():void{\r\n        Settings.stageWidth = window.innerWidth;\r\n        Settings.stageHeight = window.innerHeight;\r\n        Settings.aspectRatio = 16/9;\r\n\r\n\r\n        console.log(\"==== Initializing Settings\")\r\n    }\r\n}\r\n",
    "export class Func{\r\n    public static Sample<T> (array:Array<T>):T {\r\n        return array[Math.floor(Math.random()*array.length)];\r\n    }\r\n\r\n    public static RemoveItem<T>(array:Array<T>, item:T):void{\r\n        var index = array.indexOf(item, 0);\r\n        if (index > -1) {\r\n            array.splice(index, 1);\r\n        }\r\n    }\r\n}",
    "export class TextFormat extends PIXI.TextStyle{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        //this.fontFamily = \"Roboto Condensed\";//\"Roboto\";\r\n        this.fontSize = 15;\r\n        this.wordWrap = true;\r\n\r\n    }\r\n}",
    "import { CreatureStats } from '../Character/CreatureStats';\r\nimport { TextFormat } from './TextFormat';\r\nimport { Brain } from '../NeuralComponents/Brain';\r\nimport { Func } from './Func';\r\nimport { Settings } from '../Settings';\r\nimport { Poffin } from '../Character/Poffin';\r\nimport { Creature } from '../Character/Creature';\r\nimport { LoadedDisplaySprite } from '../Character/Display/DisplayCharacter';\r\nexport class WorldController{\r\n    \r\n    static _singleton:WorldController;\r\n    private stage:PIXI.Sprite;\r\n    private displayList:LoadedDisplaySprite[];\r\n    private foodList:Poffin[];\r\n    private creatureList:Creature[];\r\n\r\n    private spawnTimerMax:number;\r\n    private spawnTimer:number;\r\n    private worldBillBoard:PIXI.Text;\r\n    private bestCreature:Creature;\r\n    private bestStats:CreatureStats;\r\n\r\n    constructor(){\r\n        this.stage = new PIXI.Sprite();\r\n\r\n        this.displayList = [];\r\n        this.foodList = [];\r\n        this.creatureList = [];\r\n\r\n        this.spawnTimer = 5100;\r\n        this.spawnTimerMax = 5100;\r\n\r\n        this.addInformation();\r\n        this.bestStats = new CreatureStats();\r\n        this.clickHandlers();\r\n    }\r\n    public static getInstance():WorldController{\r\n        if(this._singleton == null){\r\n        this._singleton = new WorldController();\r\n        }\r\n        return this._singleton;\r\n    }\r\n\r\n    public getDisplaySprite():PIXI.Sprite{\r\n        return this.stage;\r\n    }\r\n\r\n    private clickHandlers():void{\r\n        var vm = this;\r\n        document.body.addEventListener('click', function(event:any){\r\n            if(event.path[0].tagName == \"CANVAS\"){\r\n                // Only clicks that hit the canvas directly will be let through\r\n                vm.displayList.forEach(element => {\r\n                    if((element as any).GetSprite().getBounds().contains(event.x, event.y)){\r\n\r\n                        console.log(element);\r\n\r\n                        return;\r\n                    }    \r\n                });\r\n                //\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    private addInformation():void{\r\n        var normStyle = new TextFormat();\r\n\r\n        this.worldBillBoard = new PIXI.Text(\"\", normStyle);\r\n        this.worldBillBoard.x = 20;\r\n        this.worldBillBoard.y = 20;\r\n        //this.worldBillBoard.height = 200;\r\n\r\n        this.stage.addChild(this.worldBillBoard);\r\n    }\r\n    private updateWorldBillBoard():void{\r\n        var txt = \"Best HP: \"+ this.bestStats.HP;\r\n        this.worldBillBoard.text = txt;\r\n    }\r\n\r\n    public trackCreature(cre:Creature):void{\r\n        if(this.bestCreature == null){\r\n            this.bestCreature = cre;\r\n            \r\n        }\r\n\r\n        if(cre.getHp() > this.bestStats.HP){\r\n            this.bestCreature = cre;\r\n            this.bestStats.HP = cre.getHp();\r\n        }\r\n    }\r\n\r\n    public spawn():void{\r\n        for(var i=0; i<10; i++){\r\n            this.addCreature();\r\n            this.addFood();\r\n        }\r\n    }\r\n\r\n    public reproduce(brain:Brain, parent:Creature):void{\r\n        var child = this.addCreature();\r\n        child.addBrain(brain);\r\n        child.resize(0.3);\r\n        child.x = parent.x + 20;\r\n\r\n        this.trackCreature(parent);\r\n    }\r\n\r\n    public AddGameChild(char:LoadedDisplaySprite):void{\r\n        this.stage.addChild(char.GetSprite());\r\n        this.displayList.push(char);\r\n    }\r\n\r\n    private addCreature():Creature{\r\n        var pika = new Creature(\"PikaCreature\");\r\n        pika.x = Settings.stageWidth * Math.random();\r\n        pika.y = Settings.stageHeight * Math.random();\r\n        this.AddGameChild(pika);\r\n        this.creatureList.push(pika);\r\n\r\n        return pika;\r\n    }\r\n\r\n    private addFood():void{\r\n        var food = new Poffin();\r\n        food.x = Settings.stageWidth * Math.random();\r\n        food.y = Settings.stageHeight * Math.random();\r\n        this.AddGameChild(food);\r\n        this.foodList.push(food);\r\n    }\r\n\r\n    public tickTock():void{\r\n        // Sort Z-Index\r\n        this.stage.children.sort(function(obj1, obj2) {\r\n            return obj1.position.y - obj2.position.y;\r\n        });\r\n\r\n        // Run all Objects\r\n        for( let char of this.displayList){\r\n            char.tick();\r\n        }\r\n\r\n        // Is food Eaten\r\n        for( let food of this.foodList){\r\n            if(food.markAsDeleted){\r\n                continue;\r\n            }\r\n            this.creatureList.forEach(cre=>{\r\n                if(Math.abs(cre.x - food.x) < 20){\r\n                    if(Math.abs(cre.y - food.y) < 20){\r\n                        cre.reproduce();\r\n                        food.eaten();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Clear deleted objects\r\n         for( let disobj of this.displayList){\r\n            if(disobj.markAsDeleted){\r\n                this.stage.removeChild(disobj.GetSprite());\r\n\r\n                Func.RemoveItem(this.displayList, disobj);\r\n                Func.RemoveItem(this.creatureList, disobj);\r\n                Func.RemoveItem(this.foodList, disobj);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        // Run world clock\r\n        this.spawnTimer--;\r\n        if(this.spawnTimer <= 0){\r\n            this.spawnTimer = this.spawnTimerMax;\r\n            this.spawn();\r\n        }\r\n\r\n        // worldBillBoard\r\n        this.updateWorldBillBoard();\r\n    }\r\n\r\n    public getWorldObjects():any[]{\r\n        return this.displayList;\r\n    }\r\n}",
    "import { Settings } from './Settings';\r\nimport { WorldController } from './World/WorldController';\r\nimport { AssetLoader } from './AssetLoader';\r\nimport { Renderer } from './Render/Renderer';\r\n\r\nclass RPG {\r\n\r\n  private rendererController:Renderer;\r\n  private worldController:WorldController;\r\n  \r\n  /*\r\n  -------------------------------------------\r\n  ----------  TO DO LIST --------------------\r\n  -------------------------------------------\r\n  - Get different facial expressions shown\r\n  - Tiling system\r\n  - Camera system\r\n\r\n  -------------------------------------------\r\n  ----------  Notes -------------------------\r\n  -------------------------------------------\r\n  - 32 bit / 360 dpi\r\n  */\r\n\r\n  constructor() {\r\n    console.log(\"%c========== Game Start ==========\",\"background: #222; color: #bada55;\");\r\n    var loader:AssetLoader = new AssetLoader(this.loadEngine);\r\n    loader.load();\r\n  }\r\n\r\n  private loadEngine ():void{\r\n    // Note: 'this' here is in the context of AssetLoader still\r\n    Settings.initialize();\r\n    this.rendererController = Renderer.getInstance();\r\n    this.worldController    = WorldController.getInstance();\r\n\r\n    this.worldController.spawn();\r\n    this.rendererController.AddAnySprite(this.worldController.getDisplaySprite());\r\n  }\r\n}\r\n\r\n// Game Start ----------\r\nnew RPG();\r\n//----------------------\r\n"
  ]
}